<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.Employmapper">

<!--    where标签的作用-->
<!--    1.自动添加where关键字，where内部有任何一个if满足，自动添加where关键字，不满足的话就会去掉where-->
<!--    2.自动去掉多余的and 和 or 关键字-->

<!--    if标签的作用-->
<!--    判断传入的参数，最终是否添加语句-->
<!--        test属性 内部做比较运算，如果是true就将标签的sql语句进行拼接-->
<!--        大于和小于不推荐直接写符号，不过现在也可以直接写-->
    <select id="query" resultType="bieming">
        select * from t_emp
            <where>
                <if test="name != null">
                    emp_name=#{name}
<!--                    这里就不要加where了-->
                </if>
                <if test="salary != null and salary &gt; 100"><!--&gt;是大于,$lt;是小于-->
                    and emp_salary=#{salary}
                </if>
            </where>
    </select>

<!--    set的作用：-->
<!--    1.自动去掉多余的 ,-->
<!--    2.自动添加set关键字-->
<!--    注意：set标签下的if至少有一个满足，否则报错-->
    <update id="update">
        update t_emp
        <set>
            <if test="empName != null">
                emp_name=#{empName},
            </if>
            <if test="empSalary != null">
                emp_salary=#{empSalary}
            </if>
        </set>
        where emp_id=#{empId}
    </update>

    <!-- prefix属性指定要动态添加的前缀 -->
    <!-- suffix属性指定要动态添加的后缀 -->
    <!-- prefixOverrides属性指定要动态去掉的前缀，使用“|”分隔有可能的多个值 -->
    <!-- suffixOverrides属性指定要动态去掉的后缀，使用“|”分隔有可能的多个值 -->
    <!-- 当前例子用where标签实现更简洁，但是trim标签更灵活，可以用在任何有需要的地方 -->
    <update id="updateTrim">
        update t_emp
        <trim prefix="set" suffixOverrides=",">
            <if test="empName != null">
                emp_name=#{empName},
            </if>
            <if test="empSalary != null">
                emp_salary=#{empSalary}
            </if>
        </trim>
        where emp_id=#{empId}
    </update>

    <!-- List<Employee> selectEmployeeByConditionByChoose(Employee employee) -->
    <select id="selectEmployeeByConditionByChoose" resultType="bieming">
        select * from t_emp
        where
        <choose>
            <when test="empName != null">emp_name=#{empName}</when>
            <when test="empSalary &lt; 3000">emp_salary &lt; 3000</when>
            <otherwise>1=1</otherwise>
        </choose>

        <!--
         第一种情况：第一个when满足条件 where emp_name=?
         第二种情况：第二个when满足条件 where emp_salary < 3000
         第三种情况：两个when都不满足 where 1=1 执行了otherwise
         -->
    </select>
    <!--
        collection属性：要遍历的集合
        item属性：遍历集合的过程中能得到每一个具体对象，在item属性中设置一个名字，将来通过这个名字引用遍历出来的对象
        separator属性：指定当foreach标签的标签体重复拼接字符串时，各个标签体字符串之间的分隔符
        open属性：指定整个循环把字符串拼好后，字符串整体的前面要添加的字符串
        close属性：指定整个循环把字符串拼好后，字符串整体的后面要添加的字符串
        index属性：这里起一个名字，便于后面引用
            遍历List集合，这里能够得到List集合的索引值
            遍历Map集合，这里能够得到Map集合的key
     -->
<!--    List<Employee> selectBatch(@Param("ids") List<Integer> ids);-->
    <select id="selectBatch" resultType="bieming">
        select * from t_emp where id in
                <foreach collection="ids" item="id" open="(" separator="," close=")">
                    #{id}
                </foreach>
    </select>

<!--    int insertBatch(@Param("list") List<Employee> employeeList);-->
    <insert id="insertBatch">
        insert into t_emp(emp_name,emp_salary)
                    values
                    <foreach collection="list" separator="," item="employee">
                        (#{employee.empName},#{employee.empSalary})
                    </foreach>
    </insert>

<!--    int updateBatch(@Param("list") List<Employee> employeeList);-->
<update id="updateBatch">
    <foreach collection="list" item="emp">
        update t_emp set emp_name={emp.empName},emp_salary=#{emp.empSalary} where emp_id =#{emp.empId}
    </foreach>
</update>
</mapper>